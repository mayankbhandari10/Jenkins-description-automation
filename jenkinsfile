pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                sh 'echo "Simulating Build Failure" && exit 1'
            }
        }
    }

    post {
        failure {
            script {
                // Capture the build log into a variable
                def buildLog = currentBuild.rawBuild.getLog(10000).reverse().join('\n')

                // Write the build log to a temporary file
                def logFile = writeFile(file: 'build_log.txt', text: buildLog)

                // Execute the Python script and pass the path to the log file as an argument
                def result = bat(script: "python search_pattern.py ${logFile}", returnStatus: true).trim()

                if (result.startsWith("Pattern Found")) {
                    // Extract the pattern from the result
                    def patternFound = result.split(":")[1].trim()
                    currentBuild.description = "Build Failed: ${patternFound}"
                } else {
                    currentBuild.description = "Build Failed: Unknown Reason"
                }
            }
        }
    }
}

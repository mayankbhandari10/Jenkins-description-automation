@Library('customMatcher.groovy') // Replace 'your-shared-library' with the actual name of your shared library

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    // This block captures errors during the build
                    echo "ERROR: This is an example error message"
                    error 'This is an intentional error'
                    sh 'echo "This stage has a syntax error"'
                }
            }
        }
        stage('Excep') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // This block captures errors in the 'Excep' stage
                    sh 'your_command_that_may_produce_exceptions'
                }
            }
        }
    }

    post {
        always {
            script {
                // Define your logs (assuming 'logs' variable contains the log lines)
                def logs = currentBuild.rawBuild.getLog(1000) // Adjust the number to read enough lines

                // Call the shared library function to match patterns
                def description = customMatcher(logs: logs)

                // Set the build description to the result
                currentBuild.description = description
            }
        }
    }
}
